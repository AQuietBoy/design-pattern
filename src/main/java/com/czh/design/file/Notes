
		                                         Design Patterns （设计模式）

创建型模式：提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象;

	1、工厂模式：

	    意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行;

	2、抽象工程模式：

	    意图：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类;

	3、单例模式：

	    意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点;

		实现方式：

		    1、懒汉式，线程不安全，Lazy初始化;

			2、懒汉式，线程安全，Lazy初始化;

			3、饿汉式，线程安全，Lazy初始化（否）;

			4、双检索/双重校验锁，线程安全，Lazy初始化;

			5、登记式/静态内部类，线程安全，Lazy初始化;

			6、枚举，线程安全，Lazy初始化（否）;

	4、建造者模式：

	    意图：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示;

	5、原型模式：

结构型模式：这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式;

    1、适配器模式：

	2、桥接模式：

	3、过滤器模式：

	4、组合模式：

	5、装饰器模式：

	6、外观模式：

	7、享元模式：

	8、代理模式：

行为型模式：这些设计模式特别关注对象之间的通信;

    1、责任链模式：

	2、命令模式：

	3、解释器模式：

	4、迭代器模式：

	5、中介者模式：

	6、备忘录模式：

	7、观察者模式：

	8、状态模式：

	9、空对象模式：

	10、策略模式：

	11、模板模式：

	12、访问者模式：

J2EE模式：这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的;

    1、MVC模式：

	2、业务代表模式：

	3、组合实体模式：

	4、数据访问对象模式：

	5、前端控制器模式：

	6、拦截过滤器模式：

	7、服务定位器模式：

	8：传输对象模式：





