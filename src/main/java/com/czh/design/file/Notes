
		                                                Design Patterns （设计模式）

创建型模式：提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象;

	1、工厂模式：

	    意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行;

		优点：

		    1、一个调用者想创建一个对象，只要知道其名称就可以了;

	    	2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以;

			3、屏蔽产品的具体实现，调用者只关心产品的接口;

		缺点：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事;

	2、抽象工厂模式：

	    意图：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类;

		优点：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象;

		缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码;

	3、单例模式：

	    意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点;

		实现方式：

		    1、懒汉式，线程不安全，Lazy初始化;

			2、懒汉式，线程安全，Lazy初始化;

			3、饿汉式，线程安全，Lazy初始化（否）;

			4、双检索/双重校验锁，线程安全，Lazy初始化;

			5、登记式/静态内部类，线程安全，Lazy初始化;

			6、枚举，线程安全，Lazy初始化（否）;

		优点：

		    1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）;

			2、避免对资源的多重占用（比如写文件操作）;

	    缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化;

	4、建造者模式：

	    意图：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示;

		优点：

		    1、建造者独立，易扩展;

			2、便于控制细节风险;

	    缺点：

		    1、产品必须有共同点，范围有限制;

			2、如内部变化复杂，会有很多的建造类;

	5、原型模式：

	    意图：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象;

	    优点：

		     1、性能提高;

			 2、逃避构造函数的约束;

		缺点：

		    1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候;

			2、必须实现 Cloneable 接口。

结构型模式：这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式;

    1、适配器模式：

	    意图：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作;

		优点：

		     1、可以让任何两个没有关联的类一起运行;

			 2、提高了类的复用;

			 3、增加了类的透明度;

			 4、灵活性好;

		缺点：

		    1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构;

			2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。

	2、桥接模式：

	    意图：将抽象部分与实现部分分离，使它们都可以独立的变化;

		优点：

		    1、抽象和实现的分离。

			2、优秀的扩展能力。

			3、实现细节对客户透明;

		缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程;

	3、过滤器模式：

	    意图：这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来;

	4、组合模式：

	    意图：将对象组合成树形结构以表示"部分-整体"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性;

		优点：

		    1、高层模块调用简单;

			2、节点自由增加;

		缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则;

	5、装饰器模式：

	    意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活;

		优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能;

		缺点：多层装饰比较复杂;

	6、外观模式：

	    意图：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用;

		优点：

		    1、减少系统相互依赖;

			2、提高灵活性;

			3、提高了安全性;

		缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适;

	7、享元模式：

	    意图：运用共享技术有效地支持大量细粒度的对象;

		优点：大大减少对象的创建，降低系统的内存，使效率提高;

		缺点：提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱;

	8、代理模式：

	    意图：为其他对象提供一种代理以控制对这个对象的访问;

		优点：

		    1、职责清晰;

			2、高扩展性;

			3、智能化;

	    缺点：

		    1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢;

			2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂;

行为型模式：这些设计模式特别关注对象之间的通信;

    1、责任链模式：

	2、命令模式：

	3、解释器模式：

	4、迭代器模式：

	5、中介者模式：

	6、备忘录模式：

	7、观察者模式：

	8、状态模式：

	9、空对象模式：

	10、策略模式：

	11、模板模式：

	12、访问者模式：

J2EE模式：这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的;

    1、MVC模式：

	2、业务代表模式：

	3、组合实体模式：

	4、数据访问对象模式：

	5、前端控制器模式：

	6、拦截过滤器模式：

	7、服务定位器模式：

	8：传输对象模式：





